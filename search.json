[{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with igfetchr","text":"igfetchr beginner-friendly wrapper around IG Trading REST API (labs.ig.com). provides functions authenticate, fetch markets, current prices, historical prices, account summaries, execute trades, close sessions. Disclaimer: Trading CFDs spread bets carry high risk losing money. package igfetchr financial advice.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"offline-testing-mode","dir":"Articles","previous_headings":"","what":"Offline / testing mode","title":"Getting Started with igfetchr","text":"make examples tests deterministic CRAN-friendly, igfetchr supports offline testing mode. Set environment variable IGFETCHR_TESTING = \"true\" return mock tokens accept mock_response data frames endpoints.","code":"Sys.setenv(IGFETCHR_TESTING = \"true\") library(igfetchr)"},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"authenticate-mock","dir":"Articles","previous_headings":"","what":"Authenticate (mock)","title":"Getting Started with igfetchr","text":"example uses package’s testing mode returns mock auth list instantly.","code":"auth <- ig_auth(   username = \"demo_user\",   password = \"demo_pass\",   api_key = \"demo_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" ) auth #> $cst #> [1] \"mock_cst\" #>  #> $security #> [1] \"mock_security\" #>  #> $base_url #> [1] \"https://demo-api.ig.com/gateway/deal\" #>  #> $api_key #> [1] \"demo_api_key\" #>  #> $acc_type #> [1] \"DEMO\" #>  #> $acc_number #> [1] \"ABC123\""},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"search-markets-mock","dir":"Articles","previous_headings":"","what":"Search markets (mock)","title":"Getting Started with igfetchr","text":"Use ig_search_markets() mock_response simulate API returning market results.","code":"mock_markets <- data.frame(   epic = c(\"CS.D.USDCHF.CFD.IP\"),   instrumentName = c(\"USD/CHF\"),   stringsAsFactors = FALSE )  markets <- ig_search_markets(\"USD/CHF\", auth = auth, mock_response = mock_markets) #> Warning: Unknown or uninitialised column: `markets`. markets #> # A tibble: 0 × 2 #> # ℹ 2 variables: epic <chr>, name <chr>"},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"current-price-mock","dir":"Articles","previous_headings":"","what":"Current price (mock)","title":"Getting Started with igfetchr","text":"Simulate current price response USD/CHF.","code":"mock_price <- data.frame(   bid = 0.8500,   offer = 0.8504,   timestamp = Sys.time(),   stringsAsFactors = FALSE ) price <- ig_get_price(\"CS.D.USDCHF.CFD.IP\", auth = auth, mock_response = mock_price) #> Warning: Unknown or uninitialised column: `snapshot`. price #> # A tibble: 0 × 2 #> # ℹ 2 variables: bid <dbl>, offer <dbl>"},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"historical-prices-mock","dir":"Articles","previous_headings":"","what":"Historical prices (mock)","title":"Getting Started with igfetchr","text":"Simulate historical OHLC data USD/CHF.","code":"mock_hist <- data.frame(   snapshotTime = as.character(Sys.Date() - 2:0),   open = c(0.8500, 0.8550, 0.8520),   high = c(0.8520, 0.8570, 0.8540),   low = c(0.8480, 0.8530, 0.8500),   close = c(0.8510, 0.8540, 0.8530),   stringsAsFactors = FALSE )  hist <- ig_get_historical(   epic = \"CS.D.USDCHF.CFD.IP\",   from = Sys.Date() - 2,   to = Sys.Date(),   resolution = \"D\",   auth = auth,   mock_response = mock_hist ) #> Warning in ig_get_historical(epic = \"CS.D.USDCHF.CFD.IP\", from = Sys.Date() - : #> Incompatible methods (\"Ops.Date\", \"Ops.POSIXt\") for \">\" #> Warning in ig_get_historical(epic = \"CS.D.USDCHF.CFD.IP\", from = Sys.Date() - : #> Incompatible methods (\"Ops.Date\", \"Ops.POSIXt\") for \">\" #> Warning: Unknown or uninitialised column: `prices`. #> No prices returned from API for epic 'CS.D.USDCHF.CFD.IP'. Verify epic and date range with IG support at labs.ig.com. hist #> # A tibble: 0 × 10 #> # ℹ 10 variables: snapshotTime <chr>, open_bid <dbl>, open_ask <dbl>, #> #   close_bid <dbl>, close_ask <dbl>, high_bid <dbl>, high_ask <dbl>, #> #   low_bid <dbl>, low_ask <dbl>, volume <int>"},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"accounts-mock","dir":"Articles","previous_headings":"","what":"Accounts (mock)","title":"Getting Started with igfetchr","text":"Simulate account summary retrieval.","code":"mock_accounts <- data.frame(   accountId = \"ACCT123\",   balance = 10000,   preferred = TRUE,   stringsAsFactors = FALSE ) accounts <- ig_get_accounts(auth = auth, mock_response = mock_accounts) #> Warning: Unknown or uninitialised column: `accounts`. #> No accounts returned from API. Verify authentication with IG support at labs.ig.com. accounts #> # A tibble: 0 × 13 #> # ℹ 13 variables: accountId <chr>, accountName <chr>, accountAlias <lgl>, #> #   status <chr>, accountType <chr>, preferred <lgl>, currency <chr>, #> #   canTransferFrom <lgl>, canTransferTo <lgl>, balance <dbl>, deposit <dbl>, #> #   profitLoss <dbl>, available <dbl>"},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"execute-trade-mock","dir":"Articles","previous_headings":"","what":"Execute Trade (mock)","title":"Getting Started with igfetchr","text":"Simulate executing trade USD/CHF.","code":"mock_trade <- data.frame(   dealId = \"DIXXXX\",   dealReference = \"REF123\",   status = \"OPEN\",   stringsAsFactors = FALSE ) trade <- ig_execute_trade(   epic = \"CS.D.USDCHF.CFD.IP\",   direction = \"BUY\",   size = 1.0,   auth = auth,   mock_response = mock_trade ) trade #> # A tibble: 1 × 3 #>   dealId dealReference status #>   <chr>  <chr>         <chr>  #> 1 DIXXXX REF123        OPEN"},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"close-session-mock","dir":"Articles","previous_headings":"","what":"Close Session (mock)","title":"Getting Started with igfetchr","text":"Close session.","code":"ig_close_session(auth, mock_response = TRUE) Sys.unsetenv(\"IGFETCHR_TESTING\")"},{"path":"https://sawsimeon.github.io/igfetchr/articles/getting-started.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Getting Started with igfetchr","text":"vignette uses built-testing mode runs quickly without network, satisfying CRAN checks. Real API usage requires free API key https://labs.ig.com valid credentials. Replace mock usage real calls remove testing environment variable running live.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Saw Simeon. Author, maintainer.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Simeon S (2025). igfetchr: Simplified Access IG Trading API. R package version 0.1.0, https://github.com/sawsimeon/igfetchr.","code":"@Manual{,   title = {igfetchr: Simplified Access to IG Trading API},   author = {Saw Simeon},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/sawsimeon/igfetchr}, }"},{"path":"https://sawsimeon.github.io/igfetchr/index.html","id":"igfetchr","dir":"","previous_headings":"","what":"igfetchr","title":"igfetchr","text":"igfetchr lightweight R wrapper [IG Trading REST API] (https://labs.ig.com/). provides beginner-friendly functions fetch market data, search historical prices, execute trades, get account details [IG Trading REST API] (https://labs.ig.com/). Important: Trading CFDs spread bets carries high risk losing money. package financial advice.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"igfetchr","text":"Install package GitHub (development):","code":"# install.packages(\"remotes\") remotes::install_github(\"sawsimeon/igfetchr\")"},{"path":"https://sawsimeon.github.io/igfetchr/index.html","id":"quick-example-mocked--offline","dir":"","previous_headings":"","what":"Quick example (mocked / offline)","title":"igfetchr","text":"package supports offline “testing” mode examples tests run without network calls. Set environment variable IGFETCHR_TESTING = \"true\" enable mock behavior.","code":"Sys.setenv(IGFETCHR_TESTING = \"true\")  # Mock authentication (returns mock tokens) auth <- igfetchr::ig_auth(   username = \"demo_user\",   password = \"demo_pass\",   api_key = \"demo_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" )  # Use mock_response to simulate endpoints markets <- igfetchr::ig_search_markets(   search_term = \"USD/CHF\",   auth = auth,   mock_response = data.frame(     epic = \"CS.D.USDCHF.CFD.IP\",     instrumentName = \"USD/CHF\",     stringsAsFactors = FALSE   ) )  print(markets)  # Clear testing mode Sys.unsetenv(\"IGFETCHR_TESTING\")"},{"path":"https://sawsimeon.github.io/igfetchr/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"igfetchr","text":"See vignette vignettes/getting-started.Rmd short guided demo uses mock responses runs offline CRAN checks.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/index.html","id":"real-api-usage","dir":"","previous_headings":"","what":"Real API Usage","title":"igfetchr","text":"live API calls, set environment variables security use ig_auth() without testing mode.","code":"Sys.setenv(IG_SERVICE_USERNAME = \"your_username\") Sys.setenv(IG_SERVICE_PASSWORD = \"your_password\") Sys.setenv(IG_SERVICE_API_KEY = \"your_api_key\") Sys.setenv(IG_SERVICE_ACC_TYPE = \"DEMO\") Sys.setenv(IG_SERVICE_ACC_NUMBER = \"ABC123\")  auth <- igfetchr::ig_auth() hist <- igfetchr::ig_get_historical(   epic = \"CS.D.USDCHF.CFD.IP\",   from = \"2020-01-01\",   to = \"2020-12-31\",   resolution = \"D\",   auth = auth ) print(hist)"},{"path":"https://sawsimeon.github.io/igfetchr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"igfetchr","text":"Please open issues pull requests GitHub repository: https://github.com/sawsimeon/igfetchr","code":""},{"path":"https://sawsimeon.github.io/igfetchr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"igfetchr","text":"GPL-3 License — see LICENSE file.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/dot-ig_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to make HTTP requests to IG API — .ig_request","title":"Internal function to make HTTP requests to IG API — .ig_request","text":"Internal function make HTTP requests IG API","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/dot-ig_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to make HTTP requests to IG API — .ig_request","text":"","code":".ig_request(   path,   auth,   method = c(\"GET\", \"POST\", \"PUT\", \"DELETE\"),   query = list(),   body = NULL,   version = NULL,   mock_response = NULL )"},{"path":"https://sawsimeon.github.io/igfetchr/reference/dot-ig_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to make HTTP requests to IG API — .ig_request","text":"path Character. API endpoint path (e.g., \"/positions/otc\"). auth List. Authentication details ig_auth(). method Character. HTTP method (\"GET\", \"POST\", \"PUT\", \"DELETE\"). query List. Query parameters GET requests. Defaults list(). body List. Request body POST PUT requests. Defaults NULL. version Character. API version (\"1\", \"2\", \"3\"). Defaults NULL. mock_response List data frame. Optional mock response testing, bypassing API call.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/dot-ig_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to make HTTP requests to IG API — .ig_request","text":"List API response tibble mock_response data frame.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate with the IG API — ig_auth","title":"Authenticate with the IG API — ig_auth","text":"Authenticates IG API obtain session tokens (CST X-SECURITY-TOKEN) subsequent API requests. Supports environment variables credentials optional account type number.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate with the IG API — ig_auth","text":"","code":"ig_auth(   username = Sys.getenv(\"IG_SERVICE_USERNAME\"),   password = Sys.getenv(\"IG_SERVICE_PASSWORD\"),   api_key = Sys.getenv(\"IG_SERVICE_API_KEY\"),   acc_type = Sys.getenv(\"IG_SERVICE_ACC_TYPE\", \"DEMO\"),   acc_number = Sys.getenv(\"IG_SERVICE_ACC_NUMBER\") )"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate with the IG API — ig_auth","text":"username Character. IG account username. Defaults `IG_SERVICE_USERNAME` environment variable. password Character. IG account password. Defaults `IG_SERVICE_PASSWORD` environment variable. api_key Character. IG API key. Defaults `IG_SERVICE_API_KEY` environment variable. acc_type Character. Account type, either \"DEMO\" \"LIVE\". Defaults \"DEMO\". acc_number Character. Optional account number. Defaults `IG_SERVICE_ACC_NUMBER` NULL.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate with the IG API — ig_auth","text":"list containing: cst: Client session token. security: Security token (X-SECURITY-TOKEN). base_url: Base URL API requests (DEMO LIVE). api_key: API key used authentication. acc_type: Account type (\"DEMO\" \"LIVE\"). acc_number: Account number (NULL provided).","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate with the IG API — ig_auth","text":"","code":"if (FALSE) { # \\dontrun{ # Using environment variables Sys.setenv(IG_SERVICE_USERNAME = \"your_username\") Sys.setenv(IG_SERVICE_PASSWORD = \"your_password\") Sys.setenv(IG_SERVICE_API_KEY = \"your_api_key\") Sys.setenv(IG_SERVICE_ACC_NUMBER = \"ABC123\") Sys.setenv(IG_SERVICE_ACC_TYPE = \"DEMO\") auth <- ig_auth()  # Using explicit arguments auth <- ig_auth(   username = \"your_username\",   password = \"your_password\",   api_key = \"your_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" ) } # }"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_close_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Close session — ig_close_session","title":"Close session — ig_close_session","text":"Closes authenticated IG API session. Alias `ig_close_session()`.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_close_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close session — ig_close_session","text":"","code":"ig_close_session(auth, mock_response = NULL)  ig_logout(auth, mock_response = NULL)"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_close_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close session — ig_close_session","text":"auth List. Authentication details `ig_auth()`, including `cst`, `security`, `base_url`, `api_key`, `acc_number`. mock_response Logical. Optional mock response testing (returns `TRUE` provided). Defaults `NULL`.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_close_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close session — ig_close_session","text":"Logical `TRUE` session closed successfully.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_close_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close session — ig_close_session","text":"","code":"if (FALSE) { # \\dontrun{ # Authenticate and close session auth <- ig_auth(   username = \"your_username\",   password = \"your_password\",   api_key = \"your_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" ) ig_close_session(auth)  # Using mock response for testing ig_close_session(auth, mock_response = TRUE) } # }"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_execute_trade.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a trade (place OTC position) — ig_execute_trade","title":"Execute a trade (place OTC position) — ig_execute_trade","text":"Places market trade using IG API. stops/limits fail, falls back placing trade without adding via PUT.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_execute_trade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a trade (place OTC position) — ig_execute_trade","text":"","code":"ig_execute_trade(   epic,   direction,   size,   auth,   currency_code = NULL,   expiry = NULL,   guaranteed_stop = FALSE,   level = NULL,   time_in_force = \"FILL_OR_KILL\",   order_type = \"MARKET\",   limit_distance = NULL,   limit_level = NULL,   stop_distance = NULL,   stop_level = NULL,   deal_reference = NULL,   force_open = NULL,   mock_response = NULL )"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_execute_trade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a trade (place OTC position) — ig_execute_trade","text":"epic Character. Market epic (e.g., \"CS.D.USDCHF.MINI.IP\"). direction Character. \"BUY\" \"SELL\". size Numeric. Trade size (units). auth List. Authentication details ig_auth. currency_code Character. Currency code (e.g., \"CHF\"). Defaults NULL. expiry Character. Expiry date (e.g., \"-\"). Defaults NULL. guaranteed_stop Logical. Use guaranteed stop. Defaults FALSE. level Numeric. Price level LIMIT orders. Defaults NULL. time_in_force Character. \"EXECUTE_AND_ELIMINATE\" \"FILL_OR_KILL\". Defaults \"FILL_OR_KILL\". order_type Character. \"MARKET\" \"LIMIT\". Defaults \"MARKET\". limit_distance Numeric. Limit distance points. Defaults NULL. limit_level Numeric. Limit price. Defaults NULL. stop_distance Numeric. Stop distance points. Defaults NULL. stop_level Numeric. Stop price. Defaults NULL. deal_reference Character. Custom deal reference. Defaults NULL. force_open Logical. Force new position. Defaults TRUE stops/limits specified. mock_response List data frame. Mock response testing.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_execute_trade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a trade (place OTC position) — ig_execute_trade","text":"tibble trade confirmation details (e.g., `dealId`, `dealReference`).","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_execute_trade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a trade (place OTC position) — ig_execute_trade","text":"","code":"if (FALSE) { # \\dontrun{ auth <- ig_auth(api_key = \"your_api_key\",  username = \"your_username\",  password = \"your_password\",  base_url = \"https://demo-api.ig.com\") res <- ig_execute_trade(   epic = \"CS.D.USDCHF.MINI.IP\",   direction = \"BUY\",   size = 1.0,   auth = auth,   currency_code = \"CHF\",   order_type = \"MARKET\",   time_in_force = \"FILL_OR_KILL\",   limit_distance = 2000,   stop_distance = 2000,   guaranteed_stop = FALSE,   force_open = TRUE ) print(res) } # }"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_accounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve IG account details — ig_get_accounts","title":"Retrieve IG account details — ig_get_accounts","text":"Fetches details IG accounts associated authenticated session. Returns tibble containing account information account ID, name, balance, status.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_accounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve IG account details — ig_get_accounts","text":"","code":"ig_get_accounts(auth, mock_response = NULL)"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_accounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve IG account details — ig_get_accounts","text":"auth List. Authentication details `ig_auth()`, including `cst`, `security`, `base_url`, `api_key`, `acc_number`. mock_response List data frame. Optional mock response testing, bypassing API call.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_accounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve IG account details — ig_get_accounts","text":"tibble columns including `accountId`, `accountName`, `balance`, `currency`, others returned IG API `/accounts` endpoint.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_accounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve IG account details — ig_get_accounts","text":"","code":"if (FALSE) { # \\dontrun{ # Authenticate and get accounts auth <- ig_auth(   username = \"your_username\",   password = \"your_password\",   api_key = \"your_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" ) accounts <- ig_get_accounts(auth) print(accounts)  # Using mock response for testing mock_response <- data.frame(   accountId = \"ABC123\",   accountName = \"Demo Account\",   balance.balance = 10000,   currency = \"SEK\" ) accounts <- ig_get_accounts(auth, mock_response = mock_response) } # }"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_historical.html","id":null,"dir":"Reference","previous_headings":"","what":"Get historical prices for a market — ig_get_historical","title":"Get historical prices for a market — ig_get_historical","text":"Fetches historical prices market epic specified dates given resolution IG API. Uses /prices/{epic}/{resolution}/{startDate}/{endDate} endpoint (version 2) fallback version 3.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_historical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get historical prices for a market — ig_get_historical","text":"","code":"ig_get_historical(   epic,   from,   to,   resolution = \"D\",   page_size = 20,   auth,   mock_response = NULL,   wait = 1 )"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_historical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get historical prices for a market — ig_get_historical","text":"epic Character. Market epic (e.g., \"CS.D.USDCHF.MINI.IP\"). Character Date. Start date (e.g., \"2025-09-01\" \"2025-09-01 00:00:00\"). Required. Character Date. End date (e.g., \"2025-09-28\" \"2025-09-28 23:59:59\"). Required. resolution Character. Resolution code (e.g., \"D\", \"1MIN\", \"HOUR\"). Defaults \"D\". page_size Integer. Number data points per page (v3 ). Defaults 20. auth List. Authentication details `ig_auth()`, including `cst`, `security`, `base_url`, `api_key`, `acc_number`. mock_response List data frame. Optional mock response testing, bypassing API call. wait Numeric. Seconds wait paginated API calls (v3 ). Defaults 1.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_historical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get historical prices for a market — ig_get_historical","text":"tibble historical OHLC data, including columns like `snapshotTime`, `openPrice$bid`, `openPrice$ask`, `closePrice$bid`, `closePrice$ask`, `highPrice$bid`, `highPrice$ask`, `lowPrice$bid`, `lowPrice$ask`, `lastTradedVolume`, nested `$lastTraded` fields.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_historical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get historical prices for a market — ig_get_historical","text":"","code":"if (FALSE) { # \\dontrun{ # Authenticate and get historical prices auth <- ig_auth(   username = \"your_username\",   password = \"your_password\",   api_key = \"your_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" ) hist <- ig_get_historical(   \"CS.D.USDCHF.MINI.IP\",   from = \"2025-09-01\",   to = \"2025-09-28\",   resolution = \"D\",   page_size = 20,   auth ) print(hist)  # Using time hist <- ig_get_historical(   \"CS.D.USDCHF.MINI.IP\",   from = \"2025-09-01 00:00:00\",   to = \"2025-09-28 23:59:59\",   resolution = \"D\",   page_size = 20,   auth )  # Using mock response mock_response <- list(   prices = data.frame(     snapshotTime = \"2025/09/01 00:00:00\",     openPrice.bid = 0.970,     openPrice.ask = 0.971,     openPrice.lastTraded = NA,     highPrice.bid = 0.975,     highPrice.ask = 0.976,     highPrice.lastTraded = NA,     lowPrice.bid = 0.965,     lowPrice.ask = 0.966,     lowPrice.lastTraded = NA,     closePrice.bid = 0.971,     closePrice.ask = 0.972,     closePrice.lastTraded = NA,     lastTradedVolume = 50000   ),   metadata = list(     allowance = list(remainingAllowance = 10000),     pageData = list(pageNumber = 1, totalPages = 1)   ) ) hist <- ig_get_historical(   \"CS.D.USDCHF.MINI.IP\",   from = \"2025-09-01\",   to = \"2025-09-28\",   resolution = \"D\",   page_size = 20,   auth,   mock_response = mock_response ) } # }"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_markets_by_epic.html","id":null,"dir":"Reference","previous_headings":"","what":"Get market details for one or more epics — ig_get_markets_by_epic","title":"Get market details for one or more epics — ig_get_markets_by_epic","text":"Fetches detailed market information specified market epic(s) IG API using `/markets` endpoint (version 2). Returns instrument details, dealing rules, snapshot data.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_markets_by_epic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get market details for one or more epics — ig_get_markets_by_epic","text":"","code":"ig_get_markets_by_epic(   epics,   auth,   detailed = TRUE,   mock_response = NULL,   verbose = FALSE )"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_markets_by_epic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get market details for one or more epics — ig_get_markets_by_epic","text":"epics Character vector. One market epics (e.g., \"CS.D.USDCHF.MINI.IP\" c(\"CS.D.USDCHF.MINI.IP\", \"CS.D.EURUSD.MINI.IP\")). auth List. Authentication details ig_auth. detailed Logical. Whether return detailed info (instrument dealing rules) snapshot data . Defaults TRUE. mock_response List data frame. Optional mock response testing, bypassing API call. verbose Logical. Whether print raw API response debugging. Defaults FALSE.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_markets_by_epic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get market details for one or more epics — ig_get_markets_by_epic","text":"list market details, including nested columns: `instrument` (e.g., epic, currencies, marginDepositBands),   `dealingRules` (e.g., minStepDistance, minDealSize), `snapshot` (e.g., marketStatus, bid, offer, high, low).","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_markets_by_epic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get market details for one or more epics — ig_get_markets_by_epic","text":"","code":"if (FALSE) { # \\dontrun{ # Authenticate with IG API auth <- ig_auth(   username = Sys.getenv(\"IG_SERVICE_USERNAME\"),   password = Sys.getenv(\"IG_SERVICE_PASSWORD\"),   api_key = Sys.getenv(\"IG_SERVICE_API_KEY\"),   acc_type = Sys.getenv(\"IG_SERVICE_ACC_TYPE\"),   acc_number = Sys.getenv(\"IG_SERVICE_ACC_NUMBER\") )  # Example 1: Fetch details for a single epic markets <- ig_get_markets_by_epic(\"CS.D.USDCHF.MINI.IP\", auth) print(markets) # Expected output: A tibble with 1 row and 3 columns (instrument, dealingRules, snapshot)  # Example 2: Fetch details for multiple epics markets <- ig_get_markets_by_epic(c(\"CS.D.USDCHF.MINI.IP\", \"CS.D.EURUSD.MINI.IP\"), auth) print(markets) # Expected output: A tibble with 2 rows and 3 columns  # Example 3: Fetch snapshot data only (no instrument or dealingRules) markets <- ig_get_markets_by_epic(\"CS.D.USDCHF.MINI.IP\", auth, detailed = FALSE) print(markets) # Expected output: A tibble with 1 row and 1 column (snapshot)  # Example 4: Fetch with verbose output for debugging markets <- ig_get_markets_by_epic(\"CS.D.USDCHF.MINI.IP\", auth, verbose = TRUE) print(markets) # Expected output: Prints raw JSON response, followed by a tibble with 1 row and 3 columns } # }  # Example 5: Use a mock response for testing mock_response <- list(   marketDetails = list(     list(       instrument = list(         epic = \"CS.D.USDCHF.MINI.IP\",         name = \"USD/CHF Mini\",         currencies = list(list(code = \"CHF\",          symbol = \"SF\",          baseExchangeRate = 0.08467604,          isDefault = FALSE)),         marginDepositBands = list(           list(min = 0, max = 124, margin = 3.33, currency = \"CHF\"),           list(min = 124, max = 310, margin = 3.33, currency = \"CHF\")         ),         marginFactor = 3.33,         marginFactorUnit = \"PERCENTAGE\"       ),       dealingRules = list(         minStepDistance = list(unit = \"POINTS\", value = 1.0),         minDealSize = list(unit = \"POINTS\", value = 0.1)       ),       snapshot = list(         marketStatus = \"TRADEABLE\",         bid = 0.79715,         offer = 0.79739,         high = 0.79888,         low = 0.79512,         updateTime = \"2025/09/29 18:40:51\",         binaryOdds = NA,         decimalPlacesFactor = 5,         scalingFactor = 10000       )     )   ) ) markets <- ig_get_markets_by_epic(\"CS.D.USDCHF.MINI.IP\", auth = NULL, mock_response = mock_response) print(markets) #> # A tibble: 1 × 3 #>   instrument       dealingRules     snapshot         #>   <list>           <list>           <list>           #> 1 <named list [6]> <named list [2]> <named list [9]> # Expected output: A tibble with 1 row and 3 columns (instrument, dealingRules, snapshot)"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get options/derivatives positions — ig_get_options","title":"Get options/derivatives positions — ig_get_options","text":"Retrieves positions filtered options/derivatives IG API. Returns tibble position details.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get options/derivatives positions — ig_get_options","text":"","code":"ig_get_options(auth, mock_response = NULL)"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get options/derivatives positions — ig_get_options","text":"auth List. Authentication details `ig_auth()`, including `cst`, `security`, `base_url`, `api_key`, `acc_number`. mock_response List data frame. Optional mock response testing, bypassing API call.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get options/derivatives positions — ig_get_options","text":"tibble options/derivative position details, including columns like `dealId`, `size`, `direction`, `instrumentType`, others returned IG API `/positions` endpoint. `instrumentType` available, filters \"OPTION\", \"DERIVATIVE\", \"OPTION_CONTRACT\"; otherwise, returns positions.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get options/derivatives positions — ig_get_options","text":"","code":"if (FALSE) { # \\dontrun{ # Authenticate and get options positions auth <- ig_auth(   username = \"your_username\",   password = \"your_password\",   api_key = \"your_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" ) options <- ig_get_options(auth) print(options)  # Using mock response for testing mock_response <- data.frame(   dealId = \"DIXXXX\",   size = 1.5,   direction = \"BUY\",   instrumentType = \"OPTION\" ) options <- ig_get_options(auth, mock_response = mock_response) } # }"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_price.html","id":null,"dir":"Reference","previous_headings":"","what":"Get current price for a market — ig_get_price","title":"Get current price for a market — ig_get_price","text":"Fetches current price(s) given market epic IG API using `/markets/{epic}` endpoint.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_price.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get current price for a market — ig_get_price","text":"","code":"ig_get_price(epic, auth, mock_response = NULL)"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_price.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get current price for a market — ig_get_price","text":"epic Character. Market epic (e.g., \"CS.D.USDCHF.CFD.IP\"). auth List. Authentication details `ig_auth()`, including `cst`, `security`, `base_url`, `api_key`, `acc_number`. mock_response List data frame. Optional mock response testing, bypassing API call.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_price.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get current price for a market — ig_get_price","text":"tibble price information, including columns like `marketStatus`, `bid`, `offer`, `high`, `low`, `updateTime`, others returned IG API `/markets/{epic}` endpoint.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_get_price.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get current price for a market — ig_get_price","text":"","code":"if (FALSE) { # \\dontrun{ # Authenticate and get price auth <- ig_auth(   username = \"your_username\",   password = \"your_password\",   api_key = \"your_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" ) price <- ig_get_price(\"CS.D.USDCHF.CFD.IP\", auth) print(price)  # Using mock response for testing mock_response <- list(   snapshot = data.frame(     marketStatus = \"TRADEABLE\",     bid = 0.798,     offer = 0.798,     high = 0.801,     low = 0.797,     updateTime = \"2025/09/26 21:58:57\",     binaryOdds = NA   ) ) price <- ig_get_price(\"CS.D.USDCHF.CFD.IP\", auth, mock_response = mock_response) } # }"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_search_markets.html","id":null,"dir":"Reference","previous_headings":"","what":"Search markets — ig_search_markets","title":"Search markets — ig_search_markets","text":"Search markets text query. Returns tibble matching markets IG API.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_search_markets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search markets — ig_search_markets","text":"","code":"ig_search_markets(query, auth, mock_response = NULL)"},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_search_markets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search markets — ig_search_markets","text":"query Character. Search string markets (e.g., \"USD/CHF\"). auth List. Authentication details `ig_auth()`, including `cst`, `security`, `base_url`, `api_key`, `acc_number`. mock_response List data frame. Optional mock response testing, bypassing API call.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_search_markets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search markets — ig_search_markets","text":"tibble market information, including columns like `epic`, `instrumentName`, `marketStatus`, others returned IG API `/markets` endpoint.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/ig_search_markets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search markets — ig_search_markets","text":"","code":"if (FALSE) { # \\dontrun{ # Authenticate and search markets auth <- ig_auth(   username = \"your_username\",   password = \"your_password\",   api_key = \"your_api_key\",   acc_type = \"DEMO\",   acc_number = \"ABC123\" ) markets <- ig_search_markets(\"USD/CHF\", auth) print(markets)  # Using mock response for testing mock_response <- data.frame(   epic = \"CS.D.USDCHF.MINI.IP\",   instrumentName = \"USD/CHF Mini\",   marketStatus = \"OPEN\" ) markets <- ig_search_markets(\"USD/CHF\", auth, mock_response = mock_response) } # }"},{"path":"https://sawsimeon.github.io/igfetchr/reference/igfetchr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"igfetchr: Access the IG Trading REST API — igfetchr-package","title":"igfetchr: Access the IG Trading REST API — igfetchr-package","text":"igfetchr provides small set beginner-friendly functions authenticate fetch market data, historical prices, account details, options positions, execute trades IG Trading REST API (labs.ig.com). functions return tidy tibbles straightforward analysis. Helper functions authenticate fetch market/account data IG Trading REST API. exported functions return tibbles appropriate. package data access financial advice. Trading CFDs spread bets carries high risk losing money.","code":""},{"path":"https://sawsimeon.github.io/igfetchr/reference/igfetchr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"igfetchr: Access the IG Trading REST API — igfetchr-package","text":"Disclaimer: Trading CFDs, spread bets, options carries high risk losing money. package provides data access trade execution functionality financial trading advice.","code":""},{"path":[]},{"path":"https://sawsimeon.github.io/igfetchr/reference/igfetchr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"igfetchr: Access the IG Trading REST API — igfetchr-package","text":"Maintainer: Saw Simeon saw.s@ku.th","code":""},{"path":"https://sawsimeon.github.io/igfetchr/news/index.html","id":"igfetchr-010","dir":"Changelog","previous_headings":"","what":"igfetchr 0.1.0","title":"igfetchr 0.1.0","text":"Initial release. Core functions: ig_auth, ig_search_markets, ig_get_price, ig_get_historical, ig_get_accounts, ig_logout. Added offline testing mode via environment variable IGFETCHR_TESTING = \"true\" allow examples tests run without network access. Includes unit tests, vignette, examples using mock responses. License: GPL-3.","code":""}]
